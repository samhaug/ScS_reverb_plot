#!/home/samhaug/anaconda2/bin/python

import obspy
import numpy as np
import seispy
from scipy.signal import tukey
from obspy.taup import TauPyModel
from matplotlib import pyplot as plt
from os import listdir
from scipy.signal import correlate
from scipy.signal import argrelextrema
from time import sleep


'''
After you have found the best fit perturbed PREM model that explains
the traveltimes of ScS_n, use this function to find the best event depth
to explain depth phase separation.
'''

def setup_data(data_dir,st_ind):
    st_data = obspy.read(data_dir+'FJ_clean.pk')
    st_data.filter('bandpass',freqmax=1/25.,freqmin=1/60.)
    st_data = seispy.data.normalize_on_envelope(st_data)
    st_data = seispy.data.align_on_phase(st_data,phase=['ScSScS'],a_min=False)
    data_tr = seispy.data.phase_window(st_data[st_ind],['ScSScS'],window=(-10,2050))
    data_tr.interpolate(1)
    return data_tr

def select_reverb_times(data_tr):
    fig,ax = plt.subplots(figsize=(20,5))
    t = np.linspace(0,data_tr.stats.endtime-data_tr.stats.starttime,
                    num=data_tr.stats.npts)

    coord_list = []
    def onclick(event):
        print('button=%d, x=%d, y=%d, xdata=%f, ydata=%f' %
        (event.button, event.x, event.y, event.xdata, event.ydata))
        coord_list.append(event.xdata)
    cid = fig.canvas.mpl_connect('button_press_event', onclick)
    ax.plot(data_tr.data)
    ax.set_xlim(t.min(),t.max())
    plt.show()

    true_max = []
    for ii in coord_list:
        idx = int(ii)
        shift = np.argmax(data_tr[idx-15:idx+15])-15
        max = idx+shift
        true_max.append(max)

    max1 = true_max[1]-true_max[0]
    max2 = true_max[3]-true_max[2]
    max3 = true_max[5]-true_max[4]
    dphase = np.mean([max1,max2,max3])
    err = np.round(np.std([max1,max2,max3]),2)
    return dphase,err

def find_depth(data_tr,dphase,err,model):
    model = TauPyModel(model=model)
    dp_start = data_tr.stats.sac['evdp']
    gcarc = data_tr.stats.sac['gcarc']

    phase_list = [
                  'ScSScS',
                  'sScSScS',

                  'ScSScSScS',
                  'sScSScSScS',

                  'ScSScSScSScS',
                  'sScSScSScSScS']

    time = 0
    print('Measured time separation: {} += {} seconds\n'.format(dphase,err))
    print('Starting depth: {} km\n'.format(dp_start))
    print('Starting convergence\n')
    sleep(6)

    while time > dphase+err or time < dphase-err:
        arrivals = model.get_travel_times(source_depth_in_km=dp_start,
                                      distance_in_degree=gcarc,
                                      phase_list = phase_list)
        max1 = arrivals[1].time-arrivals[0].time
        max2 = arrivals[3].time-arrivals[2].time
        max3 = arrivals[5].time-arrivals[4].time
        new_time = np.mean([max1,max2,max3])
        if new_time > dphase+err:
            dp_start += -1
        if new_time < dphase-err:
            dp_start += 1
        time = new_time
        print('New depth: {} km, time: {} s'.format(dp_start,time))


data_dir = '/home/samhaug/work1/ScS_reverb_data/20160130/'
st_ind = 12

data_tr = setup_data(data_dir,st_ind)
dphase,err = select_reverb_times(data_tr)
find_depth(data_tr,dphase,err,'prem_p2.5')














