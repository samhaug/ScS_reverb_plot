#!/home/samhaug/anaconda2/bin/python

import obspy
import numpy as np
import seispy
from scipy.signal import tukey
from obspy.taup import TauPyModel
from matplotlib import pyplot as plt
from os import listdir
from scipy.signal import correlate

'''
Use this script as a tool for checking what source depth best explains
depth phase separation.

Use this to examine ScS_n+1 - ScS_n travel times as a function of source
depth. Plots ScS_2,ScS_3, and ScS_4 for synthetic and data at each station.
'''

### Change data and simulation here.
sim_dir = '/home/samhaug/work1/ScS_reverb_sims/mineos/220_tar/src_tar/'
data_dir = '/home/samhaug/work1/ScS_reverb_data/20160130/'

def compare_plot(sts,std):
    fig,ax = plt.subplots(4,5,figsize=(20,30))
    ax = ax.reshape(ax.size)

    for idx,a in enumerate(ax):
        #ax[idx].axes.get_xaxis().set_ticks([])
        #ax[idx].axes.get_yaxis().set_ticks([])
        ax[idx].axes.xaxis.set_ticklabels([])
        ax[idx].axes.yaxis.set_ticklabels([])
        ax[idx].set_ylim(-1,1)
        #gcdiff = std[idx].stats.sac['gcarc']-sts[idx].stats.sac['gcarc']
        ax[idx].set_title(sts[idx].stats.station)
        ax[idx].grid()

        trs1 = seispy.data.phase_window(sts[idx],['ScSScS'],window=(-50,250))
        trs1.normalize()

        trd1 = seispy.data.phase_window(std[idx],['ScSScS'],window=(-50,250))
        trd1.normalize()

        trs2 = seispy.data.phase_window(sts[idx],['ScSScSScS'],window=(-50,250))
        trs2.normalize()

        trd2 = seispy.data.phase_window(std[idx],['ScSScSScS'],window=(-50,250))
        trd2.normalize()

        trs3 = seispy.data.phase_window(sts[idx],['ScSScSScSScS'],window=(-50,250))
        trs3.normalize()

        trd3 = seispy.data.phase_window(std[idx],['ScSScSScSScS'],window=(-50,250))
        trd3.normalize()
        iroll = 100-np.argmax(trs1.data)
        trs1.data = np.roll(trs1.data,iroll)
        iroll = 100-np.argmax(trs2.data)
        trs2.data = np.roll(trs2.data,iroll)
        iroll = 100-np.argmax(trs3.data)
        trs3.data = np.roll(trs3.data,iroll)

        ax[idx].plot(trd1.data/2.,alpha=0.7,color='k')
        ax[idx].plot(trs1.data/2.,alpha=0.7,color='r')

        ax[idx].plot(trd2.data/2.,alpha=0.7,color='k')
        ax[idx].plot(trs2.data/2.,alpha=0.7,color='r')

        ax[idx].plot(trd3.data/2.,alpha=0.7,color='k')
        ax[idx].plot(trs3.data/2.,alpha=0.7,color='r')

    plt.show()


sim_list = listdir(sim_dir)

for d in sim_list:

   model = TauPyModel(model='prem')
   model_sim = TauPyModel(model='prem_p2.5')

   std = obspy.read(data_dir+'FJ_clean.pk')
   std.sort(['station'])

   sts = obspy.read(sim_dir+d+'/st_T.pk')
   sts.sort(['station'])

   std.filter('bandpass',freqmax=1/25.,freqmin=1/60.)
   std.interpolate(1)
   std = seispy.data.normalize_on_envelope(std)
   std = seispy.data.align_on_phase(std,phase=['ScSScS'],a_min=False)

   sts.filter('bandpass',freqmax=1/25.,freqmin=1/60.)
   sts.interpolate(1)
   sts.integrate()
   sts.normalize()
   sts = seispy.data.normalize_on_envelope(sts)
   sts = seispy.data.align_on_phase(sts,phase=['ScSScS'],
                                    a_min=False)
   print('Current directory: {}'.format(d))
   compare_plot(sts,std)



