#!/home/samhaug/anaconda2/bin/python

import obspy
import numpy as np
import seispy
import scipy
from scipy.signal import tukey
from obspy.taup import TauPyModel
from matplotlib import pyplot as plt
from os import listdir
from scipy.signal import correlate
from matplotlib import pylab as p

'''
This is a general tool for comparing seismograms from perturbed models to
data. The simulation directories must be delimited by underscores. The second
group of strings is a number that is checked for. This script plots data traces
stacked on max correlation.
'''

### Change data and simulation here.
sim_dir = '/home/samhaug/work1/ScS_reverb_sims/mineos/FJ_v3.0_h6/'
data_dir = '/home/samhaug/work1/ScS_reverb_data/20160130/'

### Include these simulations
include_list = [0,28,30,32,40]

def align_data(std):
    tr1 = std[0]
    for idx,tr in enumerate(std[1::]):
        corr = scipy.signal.correlate(tr1.data,tr.data,mode='same')
        shift = np.argmax(corr)-int(len(tr.data)/2.)
        std[idx].data = np.roll(tr,shift)
    return std


fig,ax_list = plt.subplots(5,1,figsize=(20,30))

o_sim_list = listdir(sim_dir)
o_sim_list.sort()

sim_list = []
for ii in o_sim_list:
    if float(ii.split('_')[-1][1::]) in include_list:
        sim_list.append(ii)
print sim_list

std = obspy.read(data_dir+'FJ_clean.pk')
std.sort(['station'])
std.interpolate(1)
std = seispy.data.align_on_phase(std,phase=['ScSScS'],a_min=False)
std = seispy.data.normalize_on_envelope(std)

for idx,tr in enumerate(std):
    std[idx] = seispy.data.phase_window(tr,['ScSScS'],window=(-10,2050))
    std[idx].data *= 1./std[idx].data.max()

std = align_data(std)
std_stack = []

for tr in std:
    std_stack.append(tr.data)

mean_data = np.mean(std_stack,axis=0)
std_data = np.std(std_stack,axis=0)
t = np.linspace(0,len(mean_data),num=len(mean_data))

for idx,ax in enumerate(ax_list):
    model = TauPyModel(model='prem')
    model_sim = TauPyModel(model='prem_p2.5')
    ax.set_xlim(-10,2050)

    #ax.fill_between(t,mean_data+std_data,mean_data-std_data,alpha=0.5,color='b')
    ax.plot(t,mean_data,'k')

    sts = obspy.read(sim_dir+sim_list[idx]+'/st_T.pk')
    sts.sort(['station'])
    sts.filter('bandpass',freqmax=1/25.,freqmin=1/60.)
    sts.interpolate(1)
    sts.integrate()
    sts = seispy.data.align_on_phase(sts,phase=['ScSScS'],
                                     a_min=False)
    sts = seispy.data.normalize_on_envelope(sts)
    sts_stack = []
    for idy,tr in enumerate(sts):
        sts[idy] = seispy.data.phase_window(tr,['ScSScS'],window=(-10,2050))
    sts = align_data(sts)
    for idy,tr in enumerate(sts):
        sts[idy].stats.starttime = std[idy].stats.starttime
        sts[idy].stats.sac['gcarc'] = std[idy].stats.sac['gcarc']
        sts[idy].normalize()
        sts_stack.append(sts[idy].data)
    mean_synth = np.mean(sts_stack,axis=0)
    ax.plot(t,mean_synth,color='r',alpha=0.5,label='sim',pickradius=40,picker=True)
    ax.text(500,0.5,sim_list[idx])

dragh = seispy.draghandler.DragHandler()
plt.tight_layout()
plt.show()

#for idx,ii in enumerate(sts_stack):
#    plt.plot(ii+idx,color='k')
#plt.show()
