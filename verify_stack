#!/home/samhaug/anaconda2/bin/python

import obspy
import numpy as np
import seispy
import scipy
from scipy.signal import tukey
from obspy.taup import TauPyModel
from matplotlib import pyplot as plt
from os import listdir
from scipy.signal import correlate
from matplotlib import pylab as p

'''
This is a general tool for comparing seismograms from perturbed models to
data. The simulation directories must be delimited by underscores. The second
group of strings is a number that is checked for. This script plots data traces
stacked on max correlation.
'''

def main():
    ### Change data and simulation here.
    sim_dir = '/home/samhaug/work1/ScS_reverb_sims/mineos/PREM_RUNS/prem_japan_100113/'
    data_dir = '/home/samhaug/work1/ScS_reverb_data/013016_japan/'
    ### Include these simulations
    include_list = [0,4.0,5.0,9.0,12.0]

    fig,ax_list = plt.subplots(5,1,figsize=(20,30))
    sim_list = remove_list(include_list,sim_dir)
    print sim_list

    std = setup_data(data_dir)
    data = stack_data(std)

    print len(std)
    for ii in range(5):
        st = setup_sim(sim_dir+sim_list[ii]+'/')
        print len(st)
        sim = stack_sim(st)
        plot_compare(ax_list[ii],data,sim,sim_list[ii])

    dragh = seispy.draghandler.DragHandler()
    plt.tight_layout()
    plt.show()

def remove_list(include_list,sim_dir):
    o_sim_list = listdir(sim_dir)
    o_sim_list.sort()
    sim_list = []
    for ii in o_sim_list:
        if float(ii.split('_')[-1]) in include_list:
            sim_list.append(ii)
    return sim_list

def setup_data(data_dir):
    st = obspy.read(data_dir+'st_T_raw_clean.pk')
    st.integrate().detrend()
    st.interpolate(1)
    st.filter('bandpass',freqmin=1/80.,freqmax=1/10.,zerophase=True)
    st.sort(['station'])
    st = seispy.filter.range_filter(st,(10,90))
    for idx,tr in enumerate(st):
        st[idx] = seispy.data.phase_window(tr,phase=['ScSScS'],window=(-400,2200))
    st.normalize()
    return st

def setup_sim(sim_dir):
    st = obspy.read(sim_dir+'st_T.pk')
    st.integrate().detrend().integrate().detrend()
    st.interpolate(1)
    st.filter('bandpass',freqmin=1/80.,freqmax=1/10.,zerophase=True)
    st.sort(['station'])
    st = seispy.filter.range_filter(st,(10,90))
    for idx,tr in enumerate(st):
        st[idx] = seispy.data.phase_window(tr,phase=['ScSScS'],window=(-400,2200))
    st.normalize()
    return st

def stack_sim(sts):
    sim = []
    for tr in sts:
        sim.append(tr.data)
    return np.mean(sim,axis=0)

def stack_data(std):
    tr1 = std[0]
    data = []
    for idx,tr in enumerate(std[1::]):
        corr = scipy.signal.correlate(tr1.data,tr.data,mode='same')
        shift = np.argmax(corr)-int(len(tr.data)/2.)
        std[idx].data = np.roll(tr,shift)
    for tr in std:
        data.append(tr.data)
    return np.mean(data,axis=0)

def plot_compare(ax,data,sim,name):
    t = np.linspace(-400,2200,num=len(data))
    ax.text(0,data.max()/2.,name)
    ax.plot(t,sim,color='r',alpha=0.5,label='sim',pickradius=40,picker=True)
    ax.plot(t,data,color='k')

main()




