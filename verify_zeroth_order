#!/home/samhaug/anaconda2/bin/python

import obspy
import numpy as np
import seispy
from scipy.signal import tukey
from obspy.taup import TauPyModel
from matplotlib import pyplot as plt
from os import listdir
from scipy.signal import correlate
from matplotlib import pylab as p
from matplotlib.text import Text

'''
Use this to examine ScS_n+1 - ScS_n travel times.
This script plots the reverberative intervals for data and synthetic cases.
Use it to determine which 220km perturbed PREM model satisfies traveltimes
best.

You can drag the synthetic (red) traces to that the ScS_2 phases are perfectly
aligned. Then check the alignment of ScS_4 to get the best perturbed PREM model.
'''

# Adjust sim and data directories here
sim_dir = '/home/samhaug/work1/ScS_reverb_sims/mineos/src_3.5/'
data_dir = '/home/samhaug/work1/ScS_reverb_data/20160130/'

class DragHandler(object):
    """ A simple class to handle Drag n Drop.

    This is a simple example, which works for Text objects only.
    """
    def __init__(self, figure=None) :
        """ Create a new drag handler and connect it to the figure's event system.
        If the figure handler is not given, the current figure is used instead
        """

        if figure is None : figure = p.gcf()
        # simple attibute to store the dragged text object
        self.dragged = None

        # Connect events and callbacks
        figure.canvas.mpl_connect("pick_event", self.on_pick_event)
        figure.canvas.mpl_connect("button_release_event", self.on_release_event)

    def on_pick_event(self, event):
        " Store which text object was picked and were the pick event occurs."

        if event.artist.get_label() == 'sim':
            self.dragged = event.artist
            self.xdata = event.artist.get_data()[0]
            self.ydata = event.artist.get_data()[1]
            self.pick_pos = event.mouseevent.xdata
        return True

    def on_release_event(self, event):
        " Update text position and redraw"

        if self.dragged is not None :
            newx = event.xdata
            newy = np.roll(self.ydata,int(newx-self.pick_pos))
            self.dragged.set_data(self.xdata,newy)
            self.dragged = None
            p.draw()
        return True

fig,ax = plt.subplots(5,2,figsize=(20,30))
ax = ax.reshape(ax.size,order='F')

std = obspy.read(data_dir+'FJ_clean.pk')
std.sort(['station'])
std.filter('bandpass',freqmax=1/25.,freqmin=1/60.)
std = seispy.data.normalize_on_envelope(std)
std = seispy.data.align_on_phase(std,phase=['ScSScS'],a_min=False)
std.interpolate(1)

for dx,d in enumerate(sorted(listdir(sim_dir)[0:10])):
    #model = 'prem_'+d.split('_')[1]
    model = 'prem50'
    print model
    sts = obspy.read(sim_dir+d+'/st_T.pk')
    sts.sort(['station'])
    sts.filter('bandpass',freqmax=1/25.,freqmin=1/60.)
    sts.interpolate(1)
    sts.integrate()
    sts.normalize()
    sts = seispy.data.normalize_on_envelope(sts)
    sts = seispy.data.align_on_phase(sts,phase=['ScSScS'],a_min=False,in_model=model)
    ax[dx].set_title(d)
    ax[dx].set_xlim(-30,2050)
    ax[dx].axes.yaxis.set_ticklabels([])
    ax[dx].grid()

    sim_list = []
    data_list = []
    for idx, tr in enumerate(sts):
        trs = seispy.data.phase_window(sts[idx],['ScSScS'],window=(-30,2050))
        sim_list.append(trs.data)
        trd = seispy.data.phase_window(std[idx],['ScSScS'],window=(-30,2050))
        data_list.append(trd.data)

    msim = np.mean(sim_list,axis=0)
    mdata = np.mean(data_list,axis=0)
    if float(d.split('_')[1]) > 2.1:
        msim = np.roll(msim,36)
    if float(d.split('_')[1]) == 2.5:
        msim = np.roll(msim,30)
    else:
        msim = np.roll(msim,-8)
    sim = ax[dx].plot(msim,alpha=0.5,color='r',picker=True,label='sim',pickradius=10)
    ax[dx].plot(mdata,alpha=1.0,color='k',picker=True)
    ax[dx].set_xlim(-30,2050)
    ax[dx].tick_params(axis='both', which='major', labelsize=3)

dragh = DragHandler()
plt.tight_layout()
plt.show()





