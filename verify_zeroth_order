#!/home/samhaug/anaconda2/bin/python

import obspy
import numpy as np
import seispy
from scipy.signal import tukey
from obspy.taup import TauPyModel
from matplotlib import pyplot as plt
from os import listdir
from scipy.signal import correlate

'''
Use this to examine ScS_n+1 - ScS_n travel times.
This script plots the reverberative intervals for data and synthetic cases.
Use it to determine which 220km perturbed PREM model satisfies traveltimes
best.
'''

#model = TauPyModel(model='prem')
#model_sim = TauPyModel(model='prem_p2.5')

sim_dir = '/home/samhaug/work1/ScS_reverb_sims/mineos/zeroth_order_perturb/'
data_dir = '/home/samhaug/work1/ScS_reverb_data/20160130/'
roll_factor = 0

fig,ax = plt.subplots(5,2,figsize=(20,30))
ax = ax.reshape(ax.size,order='F')

std = obspy.read(data_dir+'FJ_clean.pk')
std.sort(['station'])
std.filter('bandpass',freqmax=1/25.,freqmin=1/60.)
std = seispy.data.normalize_on_envelope(std)
std = seispy.data.align_on_phase(std,phase=['ScSScS'],a_min=False)
std.interpolate(1)

for dx,d in enumerate(sorted(listdir(sim_dir)[0:10])):
    print(d)

    sts = obspy.read(sim_dir+d+'/st_T.pk')
    sts.sort(['station'])
    sts.filter('bandpass',freqmax=1/25.,freqmin=1/60.)
    sts.interpolate(1)
    sts.integrate()
    sts.normalize()
    sts = seispy.data.normalize_on_envelope(sts)
    sts = seispy.data.align_on_phase(sts,phase=['ScSScS'],a_min=False,model=)
    ax[dx].set_title(d)
    ax[dx].set_xlim(-30,2050)
    ax[dx].axes.yaxis.set_ticklabels([])
    #ax[dx].axes.xaxis.set_ticklabels([])
    ax[dx].grid()

    sim_list = []
    data_list = []
    for idx, tr in enumerate(sts):
        trs = seispy.data.phase_window(sts[idx],['ScSScS'],window=(-30,2050))
        sim_list.append(trs.data)
        trd = seispy.data.phase_window(std[idx],['ScSScS'],window=(-30,2050))
        data_list.append(trd.data)

    roll_num = int(float(d.split('_')[-1])*39-12)
    msim = np.mean(sim_list,axis=0)
    mdata = np.mean(data_list,axis=0)
    #msim = np.roll(msim,-1*np.argmax(msim))
    #mdata = np.roll(mdata,-1*np.argmax(mdata))
    ax[dx].plot(msim,alpha=0.5,color='r')
    ax[dx].plot(mdata,alpha=1.0,color='k')

#plt.tight_layout()
plt.show()





